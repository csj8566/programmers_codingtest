'''
그리디 : 행사끼리 진행하는 시간 서로 겹치지 않게 가장 많은 행사

행사 + 1 해줘야겠네 (텀때문에)

start 포인터와 end 포인터 써가지고 while 문으로 푸는 문제

start_end 배열을 시작지점 기준으로 오름차순 정렬.
만약 시작지점이 같으면 끝지점을 기준으로 오름차순 정렬
같은 시작지점을 갖고 있으면 더 빨리 끝나는 행사가 개수치기 하기에 유리하겠지.

	# [1,3] vs [2,3] -> 둘다 끝나는 시간 똑같으니까 걍 [1,3] 고르셈
	# [1,2] vs [1,3] -> [1,2]가 더 일찍 끝나니까 [1,2] 고르기
	# [1,3] vs [2,4] -> [1,2] 가 더 일찍 시작하고 일찍끝남
	# [1,4] vs [2,3] -> 오..이 경우 [2,3]이 더 유리한거 아님?
	# 그러면 lamda x: (x[1], x[0]) 로 sort해줘야겠네?

'''
import sys
input = sys.stdin.readline
N = int(input())

start_end = [[] for _ in range(N)]
for i in range(N):
	start, end = list(map(int, input().split()))
	start_end[i].append(start)
	start_end[i].append(end+1)

start_end.sort(key=lambda x:(x[1],x[0]))
# print(start_end)

cnt = 0
start_point, end_point = -1, -1
for sp, ep in start_end:
	# 만약에 현재의 시작점이 이전의 끝점과 같거나 크면 cnt+=1 하고 
	if sp >= end_point:
		cnt += 1
	# 시작점을 현재의 시작점, 끝점을 현재의 끝점으로 바꿈
	# 이 과정 속에서 시작점이 같은데 끝점이 늦은 애들은 다 걸러짐 (생각안해도됨)
		start_point = sp
		end_point = ep
	
print(cnt)

	
	
